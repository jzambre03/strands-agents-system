# ============================================================================
# GitLab Authentication
# ============================================================================
# Get token from: GitLab Settings > Access Tokens
# Required scopes: api, read_repository, write_repository
GITLAB_TOKEN=your_gitlab_personal_access_token_here

# ============================================================================
# GitLab Server Configuration
# ============================================================================
# Base URL of GitLab instance
# Examples:
#   https://gitlab.com                    (GitLab.com - default)
#   https://gitlab.yourcompany.com        (Self-hosted GitLab)
#   https://gitlab.example.com:8080       (Custom port)
GITLAB_BASE_URL=https://gitlab.com

# ============================================================================
# Repository Access (for gitlab_access.py)
# ============================================================================
# Repository URL to test access
GITLAB_URL=https://gitlab.com/your-group/your-repo.git

# ============================================================================
# Config Migration Settings (for migrate_configs.py)
# ============================================================================

# Source repository to copy config files from
GITLAB_SOURCE_URL=https://gitlab.com/your-group/source-repo.git

# Name for the new project (will be created)
NEW_PROJECT_NAME=config-files-only

# GitLab namespace/group where new project will be created
# Options:
#   your-group-name  → Creates: gitlab.com/your-group-name/NEW_PROJECT_NAME
#   (leave empty)    → Creates: gitlab.com/YOUR_USERNAME/NEW_PROJECT_NAME
GITLAB_NAMESPACE=your-group-name

# New project visibility (private, internal, public)
# Options:
#   private   - Only project members can access (default, recommended)
#   internal  - Any logged-in user can access
#   public    - Anyone can access without authentication
PROJECT_VISIBILITY=private

# Target branch name for commits (main, master, develop, etc.)
# The branch where config files will be committed
# Default: main
TARGET_BRANCH=main

# Config file extensions to copy (comma-separated, no dots)
# Add or remove extensions as needed
CONFIG_EXTENSIONS=yml,yaml,properties,conf,config,toml,env

# Keep git history from source (true/false)
# Note: Not fully implemented in API version
KEEP_HISTORY=true

# ============================================================================
# Optional Git User Configuration
# ============================================================================
GIT_USER_NAME=Your Name
GIT_USER_EMAIL=your.email@example.com

# ============================================================================
# Memory Safety Limits
# ============================================================================
# Maximum size for individual config files (in MB)
# Files larger than this will be skipped to prevent memory issues
# Default: 10 (recommended for most use cases)
# Increase if you have legitimate large config files
MAX_FILE_SIZE_MB=10

# Maximum total size for all config files combined (in MB)
# A warning will be shown if this limit is exceeded
# Default: 100 (prevents out-of-memory errors)
# Typical config files: 100-500 files = 1-10MB total
# Large repositories: May need to increase to 500-1000MB
MAX_TOTAL_SIZE_MB=100

# Create placeholder .SKIPPED.md files for skipped large files
# If true, creates markdown files with migration instructions for files that were skipped
# If false, only logs which files were skipped (no placeholder files created)
CREATE_PLACEHOLDERS_FOR_SKIPPED=true
