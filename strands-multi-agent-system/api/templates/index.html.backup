<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Golden Config AI - Drift Analysis Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 300;
        }
        
        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }
        
        .agent-status {
            margin-top: 15px;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 25px;
            display: inline-block;
        }
        
        .status-indicator {
            margin-right: 10px;
            font-size: 1.2em;
        }
        
        .controls {
            padding: 30px;
            border-bottom: 1px solid #eee;
            background: #f8f9fa;
        }
        
        .control-group {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .control-group label {
            font-weight: 600;
            color: #2c3e50;
            min-width: 120px;
        }
        
        .control-group input, .control-group select {
            flex: 1;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        
        .control-group input:focus, .control-group select:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: transform 0.2s ease;
            margin: 5px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .status {
            padding: 20px 30px;
            margin: 20px 30px;
            border-radius: 8px;
            font-weight: 600;
            text-align: center;
        }
        
        .status.loading {
            background: #e3f2fd;
            color: #1976d2;
            border: 2px solid #bbdefb;
        }
        
        .status.success {
            background: #e8f5e8;
            color: #2e7d32;
            border: 2px solid #c8e6c9;
        }
        
        .status.error {
            background: #ffebee;
            color: #c62828;
            border: 2px solid #ffcdd2;
        }
        
        .results {
            padding: 30px;
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .summary-card {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            border-left: 4px solid #667eea;
        }
        
        .summary-card h3 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 1.1em;
        }
        
        .summary-card .value {
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
        }
        
        .drift-details {
            margin-top: 30px;
        }
        
        .drift-item {
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            margin-bottom: 20px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .drift-item-header {
            background: #f8f9fa;
            padding: 15px 20px;
            border-bottom: 1px solid #ddd;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .drift-item-header:hover {
            background: #e9ecef;
        }
        
        .drift-item-body {
            padding: 20px;
            display: none;
        }
        
        .drift-item.expanded .drift-item-body {
            display: block;
        }
        
        .risk-badge {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .risk-high {
            background: #ffcdd2;
            color: #c62828;
        }
        
        .risk-medium {
            background: #fff3e0;
            color: #ef6c00;
        }
        
        .risk-low {
            background: #c8e6c9;
            color: #2e7d32;
        }
        
        .diff-content {
            background: #f5f5f5;
            border-radius: 5px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
            /* allow both vertical and horizontal scrolling when content is long */
            overflow: auto;
            /* limit height so each diff box scrolls independently */
            max-height: 320px;
            margin-top: 10px;
            /* preserve whitespace and formatting */
            white-space: pre;
        }
        
        .diff-line {
            padding: 2px 5px;
            margin: 1px 0;
        }
        
        .diff-added {
            background: #d4edda;
            color: #155724;
        }
        
        .diff-removed {
            background: #f8d7da;
            color: #721c24;
        }
        
        .diff-context {
            color: #6c757d;
        }
        
        .hidden {
            display: none;
        }
        
        .loading-spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        @media (max-width: 768px) {
            .container {
                margin: 10px;
            }
            
            .header h1 {
                font-size: 1.8em;
            }
            
            .control-group {
                flex-direction: column;
            }
            
            .control-group label {
                min-width: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Golden Config AI - Agent Analysis</h1>
            <p>Intelligent Configuration Drift Detection with Strands Agent System</p>
            <div id="agent-status" class="agent-status">
                <span class="status-indicator" id="status-indicator">ü§ñ</span>
                <span id="status-text">Checking agent status...</span>
            </div>
        </div>
        
        <div class="controls">
            <div class="control-group">
                <label>Data Source:</label>
                <span style="color: #667eea; font-weight: bold;">tests/data/golden vs tests/data/drifted</span>
            </div>
            <div class="control-group">
                <label for="fileTypes">Include File Types:</label>
                <select id="fileTypes">
                    <option value="all">All Configuration Files</option>
                    <option value="yml">YAML Files Only (.yml, .yaml)</option>
                    <option value="json">JSON Files Only (.json)</option>
                    <option value="properties">Properties Files Only (.properties)</option>
                    <option value="xml">XML Files Only (.xml)</option>
                </select>
            </div>
            
            <div class="control-group">
                <button class="btn" onclick="runAnalysis()">üîç Analyze Configuration Drift</button>
                <button class="btn" onclick="approveAndApply()" id="approveBtn" disabled>‚úÖ Approve Selected & Apply</button>
                <button class="btn" onclick="clearResults()">üóëÔ∏è Clear Results</button>
            </div>
        </div>
        
        <div id="status" class="status hidden"></div>
        
        <div id="results" class="results hidden">
            <div class="summary-cards">
                <div class="summary-card">
                    <h3>Files Compared</h3>
                    <div class="value" id="totalFiles">0</div>
                </div>
                <div class="summary-card">
                    <h3>Files with Drift</h3>
                    <div class="value" id="driftFiles">0</div>
                </div>
                <div class="summary-card">
                    <h3>Additions</h3>
                    <div class="value" id="additions">0</div>
                </div>
                <div class="summary-card">
                    <h3>Deletions</h3>
                    <div class="value" id="deletions">0</div>
                </div>
                <div class="summary-card">
                    <h3>Critical Changes</h3>
                    <div class="value" id="criticalChanges">0</div>
                </div>
            </div>
            
            <div class="drift-details">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h2>üìã Detailed Drift Analysis</h2>
                    <label style="display: flex; align-items: center; gap: 5px; cursor: pointer;">
                        <input type="checkbox" id="selectAllFiles" onchange="toggleSelectAll()" style="transform: scale(1.2);">
                        <span>Select All</span>
                    </label>
                </div>
                <div id="driftItems"></div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentAnalysisData = null;
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            // Load any existing results on page load
            checkForResults();
            
            // Check agent status on page load
            checkAgentStatus();
        });
        
        async function runAnalysis() {
            showStatus('Analyzing with DiffPolicyEngineAgent...', 'loading');
            
            try {
                const fileTypes = document.getElementById('fileTypes').value;
                
                const response = await fetch('/api/analyze/agent', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                            file_types: fileTypes
                        })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    currentAnalysisData = data;
                    displayResults(data);
                    showStatus('‚úÖ Configuration drift analysis completed!', 'success');
                    
                    // Enable the approve button if there are drift results
                    const driftFiles = data.agent_response?.result?.drift_analysis?.files_with_drift || 0;
                    if (driftFiles > 0) {
                        document.getElementById('approveBtn').disabled = false;
                    }
                } else {
                    throw new Error(data.error || 'Analysis failed');
                }
                
            } catch (error) {
                console.error('Analysis failed:', error);
                showStatus(`‚ùå Analysis failed: ${error.message}`, 'error');
            }
        }
        
        async function checkAgentStatus() {
            try {
                const response = await fetch('/api/agent-status');
                const data = await response.json();
                
                const statusIndicator = document.getElementById('status-indicator');
                const statusText = document.getElementById('status-text');
                
                if (data.status === 'initialized') {
                    statusIndicator.textContent = '‚úÖ';
                    statusText.textContent = `Agent Ready: ${data.agent}`;
                } else {
                    statusIndicator.textContent = 'üîÑ';
                    statusText.textContent = 'Initializing agent...';
                }
            } catch (error) {
                console.error('Failed to check agent status:', error);
                document.getElementById('status-indicator').textContent = '‚ùå';
                document.getElementById('status-text').textContent = 'Agent status unknown';
            }
        }
        
        
        async function approveAndApply() {
            showStatus('Processing approval and applying changes...', 'loading');
            
            try {
                // Get selected files from checkboxes
                const selectedFiles = [];
                const checkboxes = document.querySelectorAll('.file-checkbox:checked');
                checkboxes.forEach(checkbox => {
                    selectedFiles.push(checkbox.dataset.filePath);
                });
                
                if (selectedFiles.length === 0) {
                    showStatus('‚ö†Ô∏è Please select files to approve and apply', 'warning');
                    return;
                }
                
                const response = await fetch('/api/approve-apply', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        selected_files: selectedFiles,
                        approval_level: 'medium',
                        apply_changes: true
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    displayApprovalResults(data);
                    showStatus(`‚úÖ Approval completed! ${data.approval_summary.approved} files approved, ${data.approval_summary.rejected} rejected`, 'success');
                } else {
                    throw new Error(data.error || 'Approval failed');
                }
                
            } catch (error) {
                console.error('Approval failed:', error);
                showStatus(`‚ùå Approval failed: ${error.message}`, 'error');
            }
        }
        
        function clearResults() {
            document.getElementById('results').classList.add('hidden');
            document.getElementById('status').classList.add('hidden');
            document.getElementById('approveBtn').disabled = true;
            currentAnalysisData = null;
        }
        
        async function checkForResults() {
            try {
                const response = await fetch('/api/latest-results');
                if (response.ok) {
                    const data = await response.json();
                    if (data && data.status === 'success') {
                        currentAnalysisData = data;
                        displayResults(data);
                        showStatus('üìä Displaying latest analysis results', 'success');
                    }
                }
            } catch (error) {
                console.log('No previous results found');
            }
        }
        
        function showStatus(message, type) {
            const statusEl = document.getElementById('status');
            statusEl.textContent = message;
            statusEl.className = `status ${type}`;
            statusEl.classList.remove('hidden');
            
            if (type === 'loading') {
                statusEl.innerHTML = `<div class="loading-spinner"></div><p>${message}</p>`;
            }
        }
        
        function displayApprovalResults(data) {
            // Display approval results in a popup or overlay
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.5); z-index: 1000; display: flex;
                align-items: center; justify-content: center;
            `;
            
            const popup = document.createElement('div');
            popup.style.cssText = `
                background: white; padding: 30px; border-radius: 15px;
                max-width: 600px; max-height: 80vh; overflow-y: auto;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            `;
            
            let html = `
                <h2>üéØ Approval & Application Results</h2>
                <div style="margin: 20px 0;">
                    <strong>Summary:</strong><br>
                    ‚úÖ Approved: ${data.approval_summary.approved}<br>
                    ‚ùå Rejected: ${data.approval_summary.rejected}<br>
                    ‚ö†Ô∏è Requires Review: ${data.approval_summary.requires_review}
                </div>
                <div style="margin: 20px 0;">
                    <h3>Processed Files:</h3>
                    <div style="max-height: 300px; overflow-y: auto;">
            `;
            
            data.processed_files.forEach(file => {
                const statusIcon = file.approval_status === 'approved' ? '‚úÖ' : 
                                 file.approval_status === 'rejected' ? '‚ùå' : '‚ö†Ô∏è';
                const appliedIcon = file.applied ? '‚úÖ Applied' : '‚è∏Ô∏è Not Applied';
                
                html += `
                    <div style="border: 1px solid #ddd; padding: 10px; margin: 5px 0; border-radius: 5px;">
                        <strong>${statusIcon} ${file.file_path}</strong><br>
                        <small>Risk: ${file.risk_level} | Status: ${file.approval_status}</small><br>
                        <small>${appliedIcon} - ${file.apply_message}</small>
                    </div>
                `;
            });
            
            html += `
                    </div>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" 
                        style="background: #667eea; color: white; border: none; padding: 10px 20px; 
                               border-radius: 5px; cursor: pointer;">Close</button>
            `;
            
            popup.innerHTML = html;
            overlay.appendChild(popup);
            document.body.appendChild(overlay);
        }
        
        function displayResults(data) {
            const resultsEl = document.getElementById('results');
            resultsEl.classList.remove('hidden');
            
            // Extract analysis data
            const analysis = data.agent_response?.result?.drift_analysis || data.drift_analysis || data.result?.drift_analysis || {};
            const summary = analysis.drift_summary || {};
            const detailedDrifts = analysis.detailed_drifts || [];
            
            // Update summary cards
            document.getElementById('totalFiles').textContent = analysis.total_files_compared || 0;
            document.getElementById('driftFiles').textContent = analysis.files_with_drift || 0;
            document.getElementById('additions').textContent = summary.additions || 0;
            document.getElementById('deletions').textContent = summary.deletions || 0;
            document.getElementById('criticalChanges').textContent = summary.critical_changes || 0;
            
            // Display detailed drifts
            displayDetailedDrifts(detailedDrifts);
        }
        
        function displayDetailedDrifts(drifts) {
            const container = document.getElementById('driftItems');
            container.innerHTML = '';
            
            if (!drifts || drifts.length === 0) {
                container.innerHTML = '<p>No configuration drift detected.</p>';
                return;
            }
            
            drifts.forEach((drift, index) => {
                const driftItem = createDriftItem(drift, index);
                container.appendChild(driftItem);
            });
        }
        
        function createDriftItem(drift, index) {
            const item = document.createElement('div');
            item.className = 'drift-item';
            item.id = `drift-${index}`;
            
            const riskClass = `risk-${drift.risk_level || 'low'}`;
            const changeStats = drift.changes || {};
            
            item.innerHTML = `
                <div class="drift-item-header" onclick="toggleDriftItem(${index})">
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <input type="checkbox" class="file-checkbox" data-file-path="${drift.file_path || ''}" 
                               onclick="event.stopPropagation();" style="transform: scale(1.2);">
                        <strong>${drift.file_path || 'Unknown File'}</strong>
                        <span class="risk-badge ${riskClass}">${drift.risk_level || 'low'} risk</span>
                    </div>
                            <div>
                                <span class="change-stats">+${changeStats.additions || 0} -${changeStats.deletions || 0}</span>
                                <span class="drift-arrow" style="margin-left: 10px;">‚ñº</span>
                            </div>
                </div>
                <div class="drift-item-body">
                    <div>
                        <strong>Change Type:</strong> ${drift.change_type || 'modification'}
                    </div>
                    <div>
                        <strong>Changes:</strong> 
                        ${changeStats.additions || 0} additions, 
                        ${changeStats.deletions || 0} deletions, 
                        ${changeStats.modifications || 0} modifications
                    </div>
                    ${drift.policy_violations && drift.policy_violations.length > 0 ? 
                        `<div><strong>Policy Violations:</strong> ${drift.policy_violations.join(', ')}</div>` : ''}
                    ${drift.recommendations && drift.recommendations.length > 0 ? 
                        `<div><strong>Recommendations:</strong> ${drift.recommendations.join(', ')}</div>` : ''}
                    ${drift.diff_content ? createDiffContent(drift.diff_content) : ''}
                </div>
            `;
            
            return item;
        }
        
        function createDiffContent(diffLines) {
            if (!diffLines || diffLines.length === 0) return '';

            let diffHtml = '<div class="diff-content">';

            // Render all lines inside a scrollable container so users can scroll through full diff
            diffLines.forEach(line => {
                let lineClass = 'diff-context';
                if (line.startsWith('+')) {
                    lineClass = 'diff-added';
                } else if (line.startsWith('-')) {
                    lineClass = 'diff-removed';
                }

                diffHtml += `<div class="diff-line ${lineClass}">${escapeHtml(line)}</div>`;
            });

            diffHtml += '</div>';
            return diffHtml;
        }
        
        function toggleDriftItem(index) {
            const item = document.getElementById(`drift-${index}`);
            if (!item) return;

            const header = item.querySelector('.drift-item-header');
            const arrow = header ? header.querySelector('.drift-arrow') : null;

            const isExpanded = item.classList.toggle('expanded');
            if (arrow) arrow.textContent = isExpanded ? '‚ñ≤' : '‚ñº';

            // Ensure risk badge remains visible by explicitly keeping its display
            const badge = header ? header.querySelector('.risk-badge') : null;
            if (badge) badge.style.display = 'inline-block';
        }
        
        function toggleSelectAll() {
            const selectAllCheckbox = document.getElementById('selectAllFiles');
            const fileCheckboxes = document.querySelectorAll('.file-checkbox');
            
            fileCheckboxes.forEach(checkbox => {
                checkbox.checked = selectAllCheckbox.checked;
            });
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
</body>
</html>
